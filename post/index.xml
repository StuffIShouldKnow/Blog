<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Stuff I should&#39;ve known</title>
    <link>https://stuffishouldknow.github.io/Blog/post/</link>
    <description>Recent content in Posts on Stuff I should&#39;ve known</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Aug 2016 12:18:13 +0200</lastBuildDate>
    <atom:link href="https://stuffishouldknow.github.io/Blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Messing with submodules</title>
      <link>https://stuffishouldknow.github.io/Blog/post/messing-with-submodules/</link>
      <pubDate>Thu, 11 Aug 2016 12:18:13 +0200</pubDate>
      
      <guid>https://stuffishouldknow.github.io/Blog/post/messing-with-submodules/</guid>
      <description>&lt;p&gt;Today I&amp;rsquo;ve been trying to set up automatic deployment for this blog, using &lt;strong&gt;&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt;&lt;/strong&gt;. There is a nice guide to follow &lt;a href=&#34;https://gohugo.io/tutorials/automated-deployments/&#34;&gt;here&lt;/a&gt;, although it didn&amp;rsquo;t go without issues. At first, everything was all nice and green on the dashboard and I was happy. But, when navigating to the site, there was nothing.&lt;/p&gt;

&lt;p&gt;Checking the html files on Github confirmed this, the files where empty. The index.xml file contained all the right stuff though. This turned out to be a problem with the theme I&amp;rsquo;m using. Or, not the theme itself, the theme is fine. But I had to import it as a git submodule for Wercker to actually be able to use the theme while building my site.&lt;/p&gt;

&lt;p&gt;I created a new submodule using the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule add https://github.com/zhe/hugo-theme-slim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This created a .gitmodules file for me, clone the module in to a hugo-theme-slim folder and added the submodule to my .git/config file. But, I want the theme to be in a folder called themes/slim, not in the folder git put it. There should be a git command for this. but I couldn&amp;rsquo;t make it work. So, in my .gitmodules I changed the path of my submodule, and changed the name to be the same as the path.&lt;/p&gt;

&lt;p&gt;This wasn&amp;rsquo;t enough of course, as now my build would fail because of the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;No submodule mapping found in .gitmodules for path &#39;themes/slim&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Seems like the config file in my .git folder needed some attention aswell. The submodule is defined there too, and it&amp;rsquo;s really great if the submodule has the same name in both this file and the .gitmodules file. So, changed it to themes/slim here too, and now everything works. I have content and everything.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.git/config&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[submodule &amp;quot;themes/slim&amp;quot;]
    url = https://github.com/zhe/hugo-theme-slim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;.gitmodules&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[submodule &amp;quot;themes/slim&amp;quot;]
    path = themes/slim
    url = https://github.com/zhe/hugo-theme-slim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I going to keep learning about submodules though, I don&amp;rsquo;t think this manual workaround should be necessary, I&amp;rsquo;m sure there&amp;rsquo;s an easier way to be able to set name and path for your submodules.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Octopus can transform</title>
      <link>https://stuffishouldknow.github.io/Blog/post/octopus-can-transform/</link>
      <pubDate>Wed, 10 Aug 2016 15:10:21 +0200</pubDate>
      
      <guid>https://stuffishouldknow.github.io/Blog/post/octopus-can-transform/</guid>
      <description>&lt;p&gt;I have not worked alot with &lt;strong&gt;&lt;a href=&#34;https://octopus.com/&#34;&gt;Octopus Deploy&lt;/a&gt;&lt;/strong&gt; to be honest, but I feel like I need to learn more about it. Today I discovered that Octopus can be used to transform config files, which saved me alot of trouble in a situation where the test environment doesn&amp;rsquo;t fully replicate the production environment (I know it&amp;rsquo;s not ideal, but it&amp;rsquo;s out of my control).&lt;/p&gt;

&lt;p&gt;In my situation, I have a config file in which I need to insert some xml based on the environment I&amp;rsquo;m currently deploying to. For this, I had to create 3 files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;example.config&lt;/li&gt;
&lt;li&gt;example.Test.config&lt;/li&gt;
&lt;li&gt;example.Production.config&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that, just enable XML transformations in your deployment process and you&amp;rsquo;re good to go. Just make sure all the config files are in the nuget package, I kind of missed that at first.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static website generators are cool</title>
      <link>https://stuffishouldknow.github.io/Blog/post/static-website-generators-are-cool/</link>
      <pubDate>Wed, 10 Aug 2016 11:14:41 +0200</pubDate>
      
      <guid>https://stuffishouldknow.github.io/Blog/post/static-website-generators-are-cool/</guid>
      <description>&lt;p&gt;For example, this page is built with &lt;strong&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;&lt;/strong&gt;, and it took me about 10 minutes!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>